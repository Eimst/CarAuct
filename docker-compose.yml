
services:
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
  
  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopw
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
  
  rabitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
  
  auction-svc:
    image: sutkaitis/auction-svc:latest
    build:
      context: .
      dockerfile: src/AuctionService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:80;http://+:7777"
      RabbitMq__Host: rabitmq
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Username=postgres;Password=postgrespw;Database=auction
      IdentityServiceUrl: "http://identity-svc"
      Kestrel__Endpoints__Grpc__Protocols: "Http2"
      Kestrel__Endpoints__Grpc__Url: "http://+:7777"
      Kestrel__Endpoints__WebApi__Protocols: "Http1"
      Kestrel__Endpoints__WebApi__Url: "http://+:80"
    ports:
      - "7001:80"
      - "7777:7777"
    depends_on:
      - postgres
      - rabitmq
  
  search-svc:
    image: sutkaitis/search-svc:latest
    build:
      context: .
      dockerfile: src/SearchService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      RabbitMq__Host: rabitmq
      ConnectionStrings__MongoDbConnection: mongodb://root:mongopw@mongodb
      AuctionServiceUrl: http://auction-svc
    ports:
      - "7002:80"
    depends_on:
      - mongodb
      - rabitmq
  
  identity-svc:
    image: sutkaitis/identity-svc:latest
    build:
      context: .
      dockerfile: src/IdentityService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ASPNETCORE_URLS: http://+:80
      IssuerUri: https://id.carsties.local
      ClientApp: https://app.carsties.local
      VIRTUAL_HOST: id.carsties.local
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Username=postgres;Password=postgrespw;Database=identity
    depends_on:
      - postgres
        
  gateway-svc:
    image: sutkaitis/gateway-svc:latest
    build:
      context: .
      dockerfile: src/GatewayService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ASPNETCORE_URLS: http://+:80
      VIRTUAL_HOST: api.carsties.local
      ClientApp: https://app.carsties.local
  
  bid-svc:
    image: sutkaitis/bid-svc:latest
    build:
      context: .
      dockerfile: src/BiddingService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      RabbitMq__Host: rabitmq
      ConnectionStrings__BidDbConnection: mongodb://root:mongopw@mongodb
      IdentityServiceUrl: "http://identity-svc"
      GrpcAuction: "http://auction-svc:7777"
    ports:
      - "7003:80"
    depends_on:
      - mongodb
      - rabitmq
        
  notify-svc:
    image: sutkaitis/notify-svc:latest
    build:
      context: .
      dockerfile: src/NotificationService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      RabbitMq__Host: rabitmq
    ports:
      - "7004:80"
    depends_on:
      - rabitmq
        
  web-app:
    image: sutkaitis/web-app
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - /var/lib/web/data
    environment:
      - AUTH_SECRET="jpYz2sAm1m+2mtBv9rEdPGatg+8xdO2tib+vXKMbR4I="
      - API_URL=http://gateway-svc/
      - ID_URL=https://id.carsties.local
      - ID_URL_INTERNAL=http://identity-svc
      - AUTH_URL=https://app.carsties.local
      - AUTH_URL_INTERNAL=http://web-app:3000
      - NOTIFY_URL=https://api.carsties.local/notifications
      - VIRTUAL_HOST=app.carsties.local
      - VIRTUAL_PORT=3000

  nginx-proxy:
    image: nginxproxy/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./devcerts:/etc/nginx/certs

volumes:
  pgdata:
  mongodata:
    
